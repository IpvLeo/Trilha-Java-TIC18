# P0011 # 
#    #

## 1. Explique brevemente os conceitos fundamentais do padrão de arquitetura MVC (Model-View-Controller). Descreva o papel de cada componente (Model, View e Controller) e como eles interagem entre si. ##

#### "O MVC sugere uma maneira para você pensar na divisão de responsabilidades, principalmente dentro de um software web. O princípio básico do MVC é a divisão da aplicação em três camadas: a camada de interação do usuário (view), a camada de manipulação dos dados (model) e a camada de controle (controller)."  ####

#### Papel de cada componente: ####

#### **Model:**  #### 
#### Objeto de Aplicação. Contem a comunicação  com os dados armazenados que seram vizualizados na **view** podendo esta armazenado: bancos, XML ou em qualuqer meio. Somente no **model** que as operações _create_, _reader_, _delete_ e _delete_ e update, operações basicas em um banco de dados podem ocorrer. ####

#### **Model:** ####

* #### Encapsula o estado da aplicação.
* #### Responde a consutas do bancos de dados.
* #### Expõe as funções da aplicação
* #### Notifica **view** da mudança  ####


#### **View:**  ####
#### Interface vizualizada pelo usuário. É a camada de apresentação da aplicação que será vizualizada por um usuário final não importando quais dados e de que local tenham vindo. ####

#### **View:**  ####

* #### Renderiza informações de **models**.
* #### Requisita atualizações ao models.
* #### enviar ações de usuarios ao **controller**.  ####

#### **Controller:**  ####

#### Trabalha em relações as entradas de um **view** e como a mesma agiu na aplicação. E resposavel com os dados de entrada da view e resolve qual operação utilizará na camada **model**. ####

#### **Controller:** ####

* #### Define o comportamento da aplicação.
* #### Mapeia ações para autalizar **models**.
* #### Seleciona **views** para exibição.
* #### Um para cada funcionalidade. ####




## 2. Quais são as principais vantagens de usar o padrão MVC em uma aplicação web? Dê exemplos de situações em que a separação de responsabilidades oferecida pelo MVC é benéfica. ####

#### A principal caracteristica do modelo MVC é facilitar para os usuarios o emprego de uma aplicação, pois existe um vacuo entre o modelo mental e o modelo digital. O MVC traz vuzualização e a manipulação das informações do projeto e forma facilitada. a maior utilidade e mais comun é em aplicações de grande porte. ####


## 3. Crie um cenário hipotético de uma aplicação web simples e mostre como estaaplicação funciona se implementada utilizando MVC. ####
#### Funcionamento da Aplicação: ##

 * #### 1. Um usuário acessa a página inicial da aplicação web, que é renderizada pela visualização. Ele vê uma lista de livros disponíveis e uma opção para fazer login ou se cadastrar. ####

* #### 2. Quando o usuário faz login ou se cadastra, a visualização envia os dados fornecidos para o controlador. ####

* #### 3. O controlador recebe os dados, verifica se as informações são válidas e autentica o usuário. Ele interage com o modelo para recuperar as informações do usuário e, em seguida, atualiza a visualização para exibir as opções disponíveis para o usuário logado. ####

* #### 4. O usuário decide pegar emprestado um livro. Ele seleciona um livro e solicita o empréstimo. Essa ação é enviada para o controlador. ####

* #### 5. O controlador recebe a solicitação de empréstimo, verifica se o usuário tem permissão para pegar emprestado o livro selecionado e se há cópias disponíveis. Ele interage com o modelo para atualizar as informações de empréstimo e disponibilidade do livro no banco de dados. ####

* #### 6. Uma vez concluído o empréstimo, o controlador atualiza a visualização para refletir as mudanças, mostrando ao usuário uma confirmação de que o livro foi emprestado com sucesso. ####

* #### 7. Esse é um exemplo básico de como uma aplicação web de biblioteca online poderia funcionar usando o padrão de arquitetura MVC. Ele divide as responsabilidades entre modelo, visualização e controlador, o que facilita a manutenção e o desenvolvimento escalável da aplicação. ####


## 4. Como o MVC facilita a manutenção e a escalabilidade de um projeto? Dê exemplos práticos de como a estrutura do MVC contribui para esses objetivos.  ##

#### O padrão de arquitetura MVC (Model-View-Controller) é amplamente utilizado na construção de aplicativos web devido à sua capacidade de facilitar a manutenção e a escalabilidade do projeto. Aqui estão alguns exemplos práticos de como a estrutura do MVC contribui para esses objetivos:

#### **Separação de Responsabilidades:**O MVC divide a aplicação em três componentes principais: Modelo (Model), Visualização (View) e Controlador (Controller). Isso promove uma clara separação de responsabilidades, o que facilita a manutenção e a compreensão do código. Por exemplo, se precisarmos fazer alterações na lógica de negócios da aplicação, podemos focar no controlador, deixando a visualização e o modelo intocados. Isso reduz o risco de introduzir erros não intencionais em outras partes do sistema. ####

#### **Reutilização de Componentes:** Com a separação clara de responsabilidades, os componentes do MVC podem ser reutilizados em diferentes partes da aplicação ou até mesmo em outros projetos. Por exemplo, um controlador que gerencia o processo de autenticação de usuários pode ser reutilizado em várias áreas da aplicação onde a autenticação é necessária, sem a necessidade de reescrever o código. #### 

#### **Testabilidade:** #### O MVC facilita a realização de testes unitários e de integração, pois os componentes estão isolados uns dos outros. Por exemplo, podemos escrever testes de unidade para os controladores, testando a lógica de negócios sem a necessidade de envolver a visualização ou o modelo.####

#### **Escalabilidade Horizontal:** O MVC permite escalar horizontalmente a aplicação, adicionando mais instâncias do servidor de aplicação, distribuindo a carga entre elas. Por exemplo, se o volume de tráfego aumentar significativamente, podemos implantar mais instâncias do servidor de aplicação e configurar um balanceador de carga para distribuir as solicitações entre elas, mantendo a aplicação responsiva e escalável. ####

#### **Facilidade de Manutenção:** Como cada componente tem uma responsabilidade bem definida, a manutenção do código se torna mais fácil. Os desenvolvedores podem localizar e corrigir problemas com mais rapidez e precisão.Por exemplo, se um bug for relatado na visualização, os desenvolvedores podem se concentrar apenas nessa parte do código, sem precisar entender ou modificar outras partes do sistema. ####

## 5. O que é o Spring Boot e quais são seus principais objetivos? Explique como o Spring Boot simplifica o desenvolvimento de aplicativos Java. ##



## 6. Pesquise sobre o ciclo de vida de uma aplicação Spring Boot e o descreva aqui, incluindo as fases de inicialização, configuração e execução. Destaque a importância de anotações. ##

## 7. Você conhece outros Frameworks para desenvolvimento de APIs Rest como o Spring Boot? Pesquise sobre alguns (inclusive de outras linguagens) e fale um pouco sobre eles. ##




## 8. Uma aplicação desenvolvida com Spring Boot pode ser back end de aplicações front end desenvolvidas com outras plataformas que não sejam Java? Que relação há entre isto e o protocolo https? ##